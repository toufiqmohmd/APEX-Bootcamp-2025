--Alter Products Table to add new columns--
alter table PRODUCTS add CLOTHING VARCHAR2(200);
alter table PRODUCTS add COLOR VARCHAR2(200);
alter table PRODUCTS add DEPARTMENT VARCHAR2(200);
--Populate Data into the new columns--
UPDATE
    (
            SELECT p.product_id,
                    p.product_name,
                    p.clothing,
                    p.color,
                    p.department,
                    p.product_details
            FROM   products p ) p
 SET    p.clothing = Substr(product_name, Instr(product_name, ' ',1,1)+1, Instr(product_name, ' ',1, 2)+1 - Instr(product_name, ' ',1,1)- 2),
    p.color =
    (
            SELECT c.color
            FROM   json_table (p.product_details, '$' COLUMNS ( color VARCHAR2(4000) path '$.colour') ) c),
    p.department =
    (
            SELECT g.department
            FROM   json_table (p.product_details, '$' COLUMNS ( department VARCHAR2(4000) path '$.gender') ) g);

--Creating LookUp Tables--
create table "CLOTHING_LOOKUP" (
    "CLOTHING_ID"number generated by default on null as identity,
    "CLOTHING"   varchar2(4000 byte) not null,
    constraint "CLOTHING_LOOKUP_PK" primary key ("CLOTHING_ID")
);

insert into "CLOTHING_LOOKUP" ("CLOTHING")
select distinct "CLOTHING"
from "PRODUCTS"
where "CLOTHING" is not null;

alter table "PRODUCTS" add "CLOTHING_ID" number;

update "PRODUCTS" x
set "CLOTHING_ID" = (select "CLOTHING_ID" from "CLOTHING_LOOKUP" where "CLOTHING" = x."CLOTHING");

alter table "PRODUCTS" drop column "CLOTHING";

alter table "PRODUCTS"
add constraint "PRODUCTS_CLOTHING_FK"
foreign key ("CLOTHING_ID")
references "CLOTHING_LOOKUP"("CLOTHING_ID");
/

create table "COLOR_LOOKUP" (
    "COLOR_ID"number generated by default on null as identity,
    "COLOR"   varchar2(4000 byte) not null,
    constraint "COLOR_LOOKUP_PK" primary key ("COLOR_ID")
);

insert into "COLOR_LOOKUP" ("COLOR")
select distinct "COLOR"
from "PRODUCTS"
where "COLOR" is not null;

alter table "PRODUCTS" add "COLOR_ID" number;

update "PRODUCTS" x
set "COLOR_ID" = (select "COLOR_ID" from "COLOR_LOOKUP" where "COLOR" = x."COLOR");

alter table "PRODUCTS" drop column "COLOR";

alter table "PRODUCTS"
add constraint "PRODUCTS_COLOR_FK"
foreign key ("COLOR_ID")
references "COLOR_LOOKUP"("COLOR_ID");
/

create table "DEPARTMENT_LOOKUP" (
    "DEPARTMENT_ID"number generated by default on null as identity,
    "DEPARTMENT"   varchar2(4000 byte) not null,
    constraint "DEPARTMENT_LOOKUP_PK" primary key ("DEPARTMENT_ID")
);

insert into "DEPARTMENT_LOOKUP" ("DEPARTMENT")
select distinct "DEPARTMENT"
from "PRODUCTS"
where "DEPARTMENT" is not null;

alter table "PRODUCTS" add "DEPARTMENT_ID" number;

update "PRODUCTS" x
set "DEPARTMENT_ID" = (select "DEPARTMENT_ID" from "DEPARTMENT_LOOKUP" where "DEPARTMENT" = x."DEPARTMENT");

alter table "PRODUCTS" drop column "DEPARTMENT";

alter table "PRODUCTS"
add constraint "PRODUCTS_DEPARTMENT_FK"
foreign key ("DEPARTMENT_ID")
references "DEPARTMENT_LOOKUP"("DEPARTMENT_ID");
/

create or replace PACKAGE manage_orders
AS
  --------------------------------------------------------------
  -- Create a procedure for adding a product temporarily
  PROCEDURE add_product (
    p_product  IN NUMBER,
    p_quantity IN NUMBER);
  --------------------------------------------------------------
  -- Create a procedure for removing a product temporarily
  PROCEDURE remove_product (
    p_product IN NUMBER);
  --------------------------------------------------------------
  -- Create a function to get the number of items in the shopping cart
  FUNCTION Get_quantity
  RETURN NUMBER;
  --------------------------------------------------------------
  -- Create a procedure for validating if a product exists in the shopping cart
  FUNCTION Product_exists(
    p_product IN NUMBER)
  RETURN NUMBER;
  --------------------------------------------------------------
  -- Create a procedure for clearing the cart
  PROCEDURE clear_cart;
  --------------------------------------------------------------
  -- Create a function to validate a customer
  FUNCTION Customer_exists(
    p_customer_email IN VARCHAR2)
  RETURN NUMBER;
  --------------------------------------------------------------
  -- Create a procedure to insert orders
  PROCEDURE create_order (
    p_customer       IN VARCHAR2 DEFAULT NULL,
    p_customer_email IN VARCHAR2,
    p_store          IN NUMBER,
    p_order_id       OUT orders.order_id%TYPE,
    p_customer_id    OUT NUMBER );
END manage_orders;
/







create or replace PACKAGE BODY manage_orders
AS
  PROCEDURE add_product (p_product  IN NUMBER,
                        p_quantity IN NUMBER)
  IS
  BEGIN
      IF NOT apex_collection.collection_exists (p_collection_name => 'PRODUCTS')
      THEN
        apex_collection.create_collection(p_collection_name => 'PRODUCTS');
      END IF;

      apex_collection.add_member(p_collection_name => 'PRODUCTS',
      p_n001 => p_product,
      p_n002 => p_quantity);
  END add_product;

  PROCEDURE remove_product (p_product IN NUMBER)
  IS
    l_id NUMBER;
  BEGIN
      IF apex_collection.Collection_exists (p_collection_name => 'PRODUCTS')
      THEN
        SELECT seq_id
        INTO   l_id
        FROM   apex_collections a
        WHERE  collection_name = 'PRODUCTS'
              AND a.n001 = p_product;

        apex_collection.delete_member(p_collection_name => 'PRODUCTS',
                                      p_seq => l_id);
      END IF;
  END remove_product;

  FUNCTION get_quantity
  RETURN NUMBER
  IS
    l_items NUMBER := 0;
  BEGIN
      IF apex_collection.collection_exists (p_collection_name => 'PRODUCTS')
      THEN
        SELECT SUM(n002)
        INTO   l_items
        FROM   apex_collections a
        WHERE  collection_name = 'PRODUCTS';
      END IF;

      RETURN l_items;
  END get_quantity;

  FUNCTION product_exists(p_product IN NUMBER)
  RETURN NUMBER
  IS
    l_quantity NUMBER;
  BEGIN
      IF apex_collection.collection_exists (p_collection_name => 'PRODUCTS')
      THEN
        SELECT a.n002
        INTO   l_quantity
        FROM   apex_collections a
        WHERE  collection_name = 'PRODUCTS'
              AND a.n001 = p_product;

        RETURN l_quantity;
      ELSE
        RETURN 0;
      END IF;
  EXCEPTION
    WHEN OTHERS THEN
              RETURN 0;
  END product_exists;

  PROCEDURE clear_cart
  IS
  BEGIN
      IF apex_collection.collection_exists (p_collection_name => 'PRODUCTS')
      THEN
        apex_collection.truncate_collection(p_collection_name => 'PRODUCTS');
      END IF;
  END clear_cart;

  FUNCTION customer_exists(p_customer_email IN VARCHAR2)
  RETURN NUMBER
  IS
    l_customer customers.customer_id%TYPE;
  BEGIN
      SELECT customer_id
      INTO   l_customer
      FROM   customers
      WHERE  email_address = p_customer_email;

      RETURN l_customer;
  EXCEPTION
    WHEN no_data_found THEN
              RETURN 0;
  END customer_exists;

  PROCEDURE create_order (p_customer       IN VARCHAR2,
                          p_customer_email IN VARCHAR2,
                          p_store          IN NUMBER,
                          p_order_id       OUT orders.order_id%TYPE,
                          p_customer_id    OUT NUMBER)
  IS
  BEGIN
      p_customer_id := customer_exists(p_customer_email);

      IF p_customer_id = 0 THEN
        INSERT INTO customers
                    (full_name,
                    email_address)
        VALUES      (p_customer,
                    p_customer_email)
        returning customer_id INTO p_customer_id;
      END IF;

      INSERT INTO orders
                  (order_datetime,
                  customer_id,
                  store_id,
                  order_status)
      VALUES      (SYSDATE,
                  p_customer_id,
                  p_store,
                  'OPEN')
      returning order_id INTO p_order_id;

      IF apex_collection.collection_exists (p_collection_name => 'PRODUCTS')
      THEN
        INSERT INTO order_items
                    (order_id,
                    line_item_id,
                    product_id,
                    unit_price,
                    quantity)
        SELECT p_order_id,
              seq_id,
              p.product_id,
              p.unit_price,
              n002
        FROM   apex_collections a,
              products p
        WHERE  collection_name = 'PRODUCTS'
              AND p.product_id = a.n001;
      END IF;

      apex_collection.delete_collection(p_collection_name => 'PRODUCTS');
  END create_order;
END manage_orders;
/
